{"version":3,"file":"6022.review-details.146058b3ae70ed15a604.js","mappings":"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","sources":["webpack://my-new-custom-application-project/./src/components/review-details/constants.ts","webpack://my-new-custom-application-project/./src/components/review-details/validate.ts","webpack://my-new-custom-application-project/./src/components/review-details/messages.ts","webpack://my-new-custom-application-project/./src/components/review-details/review-details-form.tsx","webpack://my-new-custom-application-project/./src/components/review-details/conversions.ts","webpack://my-new-custom-application-project/./src/components/review-details/transform-errors.ts","webpack://my-new-custom-application-project/./src/components/review-details/review-details.tsx","webpack://my-new-custom-application-project/./src/constants.ts"],"sourcesContent":["// https://docs.commercetools.com/api/projects/channels#channelroleenum\r\nexport const CHANNEL_ROLES = {\r\n  Pending: 'Pending',\r\n  Approved: 'Approved',\r\n};\r\n","import TextInput from '@commercetools-uikit/text-input';\r\nimport omitEmpty from 'omit-empty-es';\r\nimport type { FormikErrors } from 'formik';\r\nimport type { TFormValues } from '../../types';\r\n\r\ntype TErrors = {\r\n  key: { missing?: boolean };\r\n  roles: { missing?: boolean };\r\n};\r\n\r\nconst validate = (formikValues: TFormValues): FormikErrors<TFormValues> => {\r\n  const errors: TErrors = {\r\n    key: {},\r\n    roles: {},\r\n  };\r\n\r\n  if (TextInput.isEmpty(formikValues.key)) {\r\n    errors.key.missing = true;\r\n  }\r\n  if (Array.isArray(formikValues.roles) && formikValues.roles.length === 0) {\r\n    errors.roles.missing = true;\r\n  }\r\n  return omitEmpty(errors);\r\n};\r\n\r\nexport default validate;\r\n","import { defineMessages } from 'react-intl';\r\n\r\nexport default defineMessages({\r\n  backToChannelsList: {\r\n    id: 'ChannelDetails.backToChannelsList',\r\n    defaultMessage: 'Back to channels list',\r\n  },\r\n  duplicateKey: {\r\n    id: 'ChannelDetails.duplicateKey',\r\n    defaultMessage: 'A channel with this key already exists.',\r\n  },\r\n  channelUpdated: {\r\n    id: 'ChannelDetails.channelUpdated',\r\n    defaultMessage: 'Review updated',\r\n  },\r\n  channelKeyLabel: {\r\n    id: 'ChannelDetails.channelKeyLabel',\r\n    defaultMessage: 'Review Key',\r\n  },\r\n  channelVersion: {\r\n    id: 'ChannelDetails.channelVersion',\r\n    defaultMessage: 'Review Version',\r\n  },\r\n  channelRatingLabel: {\r\n    id: 'ChannelDetails.channelRatingLabel',\r\n    defaultMessage: 'Review Rating',\r\n  },\r\n  channelNameLabel: {\r\n    id: 'ChannelDetails.channelNameLabel',\r\n    defaultMessage: 'Channel name',\r\n  },\r\n  channelRolesLabel: {\r\n    id: 'ChannelDetails.channelRolesLabel',\r\n    defaultMessage: 'Review State',\r\n  },\r\n  hint: {\r\n    id: 'ChannelDetails.hint',\r\n    defaultMessage:\r\n      'This page demonstrates for instance how to use forms, notifications and how to update data using GraphQL, etc.',\r\n  },\r\n  modalTitle: {\r\n    id: 'ChannelDetails.modalTitle',\r\n    defaultMessage: 'Edit channel',\r\n  },\r\n  channelDetailsErrorMessage: {\r\n    id: 'ChannelDetails.errorMessage',\r\n    defaultMessage:\r\n      'We were unable to fetch the channel details. Please check your connection, the provided channel ID and try again.',\r\n  },\r\n});\r\n","import type { ReactElement } from 'react';\r\nimport { useFormik, type FormikHelpers } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport LocalizedTextField from '@commercetools-uikit/localized-text-field';\r\nimport TextField from '@commercetools-uikit/text-field';\r\nimport Spacings from '@commercetools-uikit/spacings';\r\nimport SelectField from '@commercetools-uikit/select-field';\r\nimport type { TFormValues } from '../../types';\r\nimport { CHANNEL_ROLES } from './constants';\r\nimport validate from './validate';\r\nimport messages from './messages';\r\nimport { TStateRole, TReviewCustomState } from '../../types/generated/ctp';\r\n\r\ntype TChannelRole = keyof typeof CHANNEL_ROLES;\r\ntype Formik = ReturnType<typeof useFormik>;\r\ntype FormProps = {\r\n  formElements: ReactElement;\r\n  values: Formik['values'];\r\n  isDirty: Formik['dirty'];\r\n  isSubmitting: Formik['isSubmitting'];\r\n  submitForm: Formik['handleSubmit'];\r\n  handleReset: Formik['handleReset'];\r\n};\r\n\r\ntype TReviewFormValues = {\r\n  key: string;\r\n  rating: string;\r\n  state: TReviewCustomState;\r\n  version: string;\r\n};\r\n\r\ntype TReviewDetailsFormProps = {\r\n  onSubmit: (\r\n    values: TFormValues,\r\n    formikHelpers: FormikHelpers<TFormValues>\r\n  ) => void | Promise<unknown>;\r\n  initialValues: TReviewFormValues;\r\n  isReadOnly: boolean;\r\n  dataLocale: string;\r\n  children: (formProps: FormProps) => JSX.Element;\r\n};\r\n\r\nconst getRoleOptions = Object.keys(CHANNEL_ROLES).map((key) => ({\r\n  label: CHANNEL_ROLES[key as TChannelRole],\r\n  value: CHANNEL_ROLES[key as TChannelRole],\r\n}));\r\n\r\nconst ReviewDetailsForm = (props: TReviewDetailsFormProps) => {\r\n  const intl = useIntl();\r\n  const formik = useFormik<TFormValues>({\r\n    initialValues: props.initialValues,\r\n    onSubmit: props.onSubmit,\r\n    validate,\r\n    enableReinitialize: true,\r\n  });\r\n\r\n  const formElements = (\r\n    <Spacings.Stack scale=\"l\">\r\n      <TextField\r\n        name=\"key\"\r\n        title={intl.formatMessage(messages.channelKeyLabel)}\r\n        value={formik.values.key}\r\n        errors={TextField.toFieldErrors<TFormValues>(formik.errors).key}\r\n        touched={formik.touched.key}\r\n        // onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        isReadOnly={true}\r\n        renderError={(errorKey) => {\r\n          if (errorKey === 'duplicate') {\r\n            return intl.formatMessage(messages.duplicateKey);\r\n          }\r\n          return null;\r\n        }}\r\n        isRequired\r\n        horizontalConstraint={13}\r\n      />\r\n      <TextField\r\n        name=\"version\"\r\n        title={intl.formatMessage(messages.channelVersion)}\r\n        value={formik.values.version}\r\n        errors={TextField.toFieldErrors<TFormValues>(formik.errors).version}\r\n        touched={formik.touched.version}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        isReadOnly={true}\r\n        renderError={(errorKey) => {\r\n          if (errorKey === 'duplicate') {\r\n            return intl.formatMessage(messages.duplicateKey);\r\n          }\r\n          return null;\r\n        }}\r\n        isRequired\r\n        horizontalConstraint={13}\r\n      />\r\n      <TextField\r\n        name=\"rating\"\r\n        title={intl.formatMessage(messages.channelRatingLabel)}\r\n        value={formik.values.rating}\r\n        errors={TextField.toFieldErrors<TFormValues>(formik.errors).rating}\r\n        touched={formik.touched.rating}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        isReadOnly={true}\r\n        renderError={(errorKey) => {\r\n          if (errorKey === 'duplicate') {\r\n            return intl.formatMessage(messages.duplicateKey);\r\n          }\r\n          return null;\r\n        }}\r\n        horizontalConstraint={13}\r\n      />\r\n      <SelectField\r\n        name=\"state\"\r\n        title={intl.formatMessage(messages.channelRolesLabel)}\r\n        value={formik.values.state}\r\n        errors={SelectField.toFieldErrors<TFormValues>(formik.errors).state}\r\n        touched={formik.touched.state}\r\n        onChange={formik.handleChange}\r\n        options={getRoleOptions}\r\n        isReadOnly={props.isReadOnly}\r\n        horizontalConstraint={13}\r\n      />\r\n    </Spacings.Stack>\r\n  );\r\n\r\n  return props.children({\r\n    formElements,\r\n    values: formik.values,\r\n    isDirty: formik.dirty,\r\n    isSubmitting: formik.isSubmitting,\r\n    submitForm: formik.handleSubmit,\r\n    handleReset: formik.handleReset,\r\n  });\r\n};\r\nReviewDetailsForm.displayName = 'ReviewDetailsForm';\r\n\r\nexport default ReviewDetailsForm;\r\n","import LocalizedTextInput from '@commercetools-uikit/localized-text-input';\r\nimport { transformLocalizedFieldToLocalizedString } from '@commercetools-frontend/l10n';\r\nimport type { TFetchReviewDetailsQuery } from '../../types/generated/ctp';\r\nimport type { TFormValues } from '../../types';\r\n\r\nexport const docToFormValues = (\r\n  review: TFetchReviewDetailsQuery['review'],\r\n  languages: string[]\r\n) => ({\r\n  key: review?.key ?? '',\r\n  rating: review?.rating,\r\n  state: review?.state?.key,\r\n  version: review?.version,\r\n  name: LocalizedTextInput.createLocalizedString(\r\n    languages,\r\n    transformLocalizedFieldToLocalizedString(review?.state?.nameAllLocales ?? []) ??\r\n      {}\r\n  ),\r\n});\r\n\r\nexport const formValuesToDoc = (formValues: TFormValues) => ({\r\n  key: formValues.key,\r\n  rating: formValues.rating,\r\n  state: formValues.state,\r\n  version: formValues.version,\r\n});\r\n","import omitEmpty from 'omit-empty-es';\r\n\r\nconst DUPLICATE_FIELD_ERROR_CODE = 'DuplicateField';\r\n\r\ntype TransformedErrors = {\r\n  unmappedErrors: unknown[];\r\n  formErrors: Record<string, { duplicate: boolean }>;\r\n};\r\n\r\nexport const transformErrors = (graphQlErrors: unknown): TransformedErrors => {\r\n  const errorsToMap = Array.isArray(graphQlErrors)\r\n    ? graphQlErrors\r\n    : [graphQlErrors];\r\n\r\n  const { formErrors, unmappedErrors } = errorsToMap.reduce<TransformedErrors>(\r\n    (transformedErrors, graphQlError) => {\r\n      const errorCode = graphQlError?.extensions?.code ?? graphQlError.code;\r\n      const fieldName = graphQlError?.extensions?.field ?? graphQlError.field;\r\n\r\n      if (errorCode === DUPLICATE_FIELD_ERROR_CODE) {\r\n        transformedErrors.formErrors[fieldName] = { duplicate: true };\r\n      } else {\r\n        transformedErrors.unmappedErrors.push(graphQlError);\r\n      }\r\n      return transformedErrors;\r\n    },\r\n    {\r\n      formErrors: {}, // will be mappped to form field error messages\r\n      unmappedErrors: [], // will result in dispatching `showApiErrorNotification`\r\n    }\r\n  );\r\n\r\n  return {\r\n    formErrors: omitEmpty(formErrors),\r\n    unmappedErrors,\r\n  };\r\n};\r\n","import { useIntl } from 'react-intl';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  PageNotFound,\r\n  FormModalPage,\r\n} from '@commercetools-frontend/application-components';\r\nimport { ContentNotification } from '@commercetools-uikit/notifications';\r\nimport Text from '@commercetools-uikit/text';\r\nimport Spacings from '@commercetools-uikit/spacings';\r\nimport LoadingSpinner from '@commercetools-uikit/loading-spinner';\r\nimport { useCallback } from 'react';\r\nimport { useApplicationContext } from '@commercetools-frontend/application-shell-connectors';\r\nimport { formatLocalizedString } from '@commercetools-frontend/l10n';\r\nimport { DOMAINS, NO_VALUE_FALLBACK } from '@commercetools-frontend/constants';\r\nimport { useIsAuthorized } from '@commercetools-frontend/permissions';\r\nimport {\r\n  useShowNotification,\r\n  useShowApiErrorNotification,\r\n  type TApiErrorNotificationOptions,\r\n} from '@commercetools-frontend/actions-global';\r\nimport { PERMISSIONS } from '../../constants';\r\nimport {\r\n  useReviewDetailsUpdater,\r\n  useReviewDetailsFetcher,\r\n} from '../../hooks/use-reviews-connector';\r\n// import { docToFormValues, formValuesToDoc } from './conversions';\r\n// import ChannelsDetailsForm from './channel-details-form';\r\n// import { transformErrors } from './transform-errors';\r\n// import messages from './messages';\r\nimport { ApplicationPageTitle } from '@commercetools-frontend/application-shell';\r\nimport ReviewDetailsForm from './review-details-form';\r\nimport { docToFormValues, formValuesToDoc } from './conversions';\r\nimport messages from './messages';\r\nimport { transformErrors } from './transform-errors';\r\n\r\ntype TReviewDetailsProps = {\r\n  onClose: () => void;\r\n};\r\n\r\nconst ReviewDetails = (props: TReviewDetailsProps) => {\r\n  const intl = useIntl();\r\n  const params = useParams<{ id: string }>();\r\n  const { loading, error, review } = useReviewDetailsFetcher(params.id);\r\n  const { dataLocale, projectLanguages } = useApplicationContext((context) => ({\r\n    dataLocale: context.dataLocale ?? '',\r\n    projectLanguages: context.project?.languages ?? [],\r\n  }));\r\n  const canManage = useIsAuthorized({\r\n    demandedPermissions: [PERMISSIONS.Manage],\r\n  });\r\n  const showNotification = useShowNotification();\r\n  const showApiErrorNotification = useShowApiErrorNotification();\r\n  const reviewDetailsUpdater = useReviewDetailsUpdater();\r\n  const handleSubmit = useCallback(\r\n    async (formikValues, formikHelpers) => {\r\n      const data = formValuesToDoc(formikValues);\r\n      try {\r\n        await reviewDetailsUpdater.execute({\r\n          originalDraft: review!,\r\n          nextDraft: data,\r\n        });\r\n        showNotification({\r\n          kind: 'success',\r\n          domain: DOMAINS.SIDE,\r\n          text: intl.formatMessage(messages.channelUpdated, {\r\n            channelName: formatLocalizedString(formikValues, {\r\n              key: 'name',\r\n              locale: dataLocale,\r\n              fallbackOrder: projectLanguages,\r\n            }),\r\n          }),\r\n        });\r\n      } catch (graphQLErrors) {\r\n        const transformedErrors = transformErrors(graphQLErrors);\r\n        if (transformedErrors.unmappedErrors.length > 0) {\r\n          showApiErrorNotification({\r\n            errors:\r\n              transformedErrors.unmappedErrors as TApiErrorNotificationOptions['errors'],\r\n          });\r\n        }\r\n\r\n        formikHelpers.setErrors(transformedErrors.formErrors);\r\n      }\r\n    },\r\n    [\r\n      review,\r\n      reviewDetailsUpdater,\r\n      dataLocale,\r\n      intl,\r\n      projectLanguages,\r\n      showApiErrorNotification,\r\n      showNotification,\r\n    ]\r\n  );\r\n  return (\r\n    <ReviewDetailsForm\r\n      initialValues={docToFormValues(review, projectLanguages)}\r\n      onSubmit={handleSubmit}\r\n      isReadOnly={!canManage}\r\n      dataLocale={dataLocale}\r\n    >\r\n      {(formProps) => {\r\n        return (\r\n          <FormModalPage\r\n            title={formProps.values?.key}\r\n            isOpen\r\n            onClose={props.onClose}\r\n            isPrimaryButtonDisabled={\r\n              formProps.isSubmitting || !formProps.isDirty || !canManage\r\n            }\r\n            isSecondaryButtonDisabled={!formProps.isDirty}\r\n            onSecondaryButtonClick={formProps.handleReset}\r\n            onPrimaryButtonClick={() => formProps.submitForm()}\r\n            labelPrimaryButton={FormModalPage.Intl.save}\r\n            labelSecondaryButton={FormModalPage.Intl.revert}\r\n          >\r\n            {loading && (\r\n              <Spacings.Stack alignItems=\"center\">\r\n                <LoadingSpinner />\r\n              </Spacings.Stack>\r\n            )}\r\n            {error && (\r\n              <ContentNotification type=\"error\">\r\n                <Text.Body>\r\n                  {intl.formatMessage(messages.channelDetailsErrorMessage)}\r\n                </Text.Body>\r\n              </ContentNotification>\r\n            )}\r\n            {review && formProps.formElements}\r\n            {review && (\r\n              <ApplicationPageTitle additionalParts={[formProps.values?.key]} />\r\n            )}\r\n            {review === null && <PageNotFound />}\r\n          </FormModalPage>\r\n        );\r\n      }}\r\n    </ReviewDetailsForm>\r\n  );\r\n};\r\nReviewDetails.displayName = 'ReviewDetails';\r\n\r\nexport default ReviewDetails;\r\n","// Make sure to import the helper functions from the `ssr` entry point.\nimport { entryPointUriPathToPermissionKeys } from '@commercetools-frontend/application-shell/ssr';\n\nexport const entryPointUriPath = 'product-review';\n\nexport const PERMISSIONS = entryPointUriPathToPermissionKeys(entryPointUriPath);\n"],"names":["CHANNEL_ROLES","Pending","Approved","formikValues","errors","key","roles","TextInput","missing","_Array$isArray","length","omitEmpty","defineMessages","backToChannelsList","id","defaultMessage","duplicateKey","channelUpdated","channelKeyLabel","channelVersion","channelRatingLabel","channelNameLabel","channelRolesLabel","hint","modalTitle","channelDetailsErrorMessage","getRoleOptions","_mapInstanceProperty","_context","_Object$keys","call","label","value","ReviewDetailsForm","props","intl","useIntl","formik","useFormik","initialValues","onSubmit","validate","enableReinitialize","formElements","_jsxs","Spacings","scale","children","_jsx","TextField","name","title","formatMessage","messages","_valuesInstanceProperty","touched","onBlur","handleBlur","isReadOnly","renderError","errorKey","isRequired","horizontalConstraint","version","onChange","handleChange","rating","SelectField","state","options","values","isDirty","dirty","isSubmitting","submitForm","handleSubmit","handleReset","displayName","docToFormValues","review","languages","_review$key","_review$state","_transformLocalizedFi","_review$state$nameAll","_review$state2","LocalizedTextInput","transformLocalizedFieldToLocalizedString","nameAllLocales","ReviewDetails","params","useParams","_useReviewDetailsFetc","useReviewDetailsFetcher","loading","error","_useApplicationContex","useApplicationContext","context","_context$dataLocale","_context$project$lang","_context$project","dataLocale","projectLanguages","project","canManage","useIsAuthorized","demandedPermissions","PERMISSIONS","showNotification","useShowNotification","showApiErrorNotification","useShowApiErrorNotification","reviewDetailsUpdater","useReviewDetailsUpdater","useCallback","async","formikHelpers","data","formValues","execute","originalDraft","nextDraft","kind","domain","DOMAINS","text","channelName","formatLocalizedString","locale","fallbackOrder","graphQLErrors","transformedErrors","graphQlErrors","errorsToMap","_errorsToMap$reduce","_reduceInstanceProperty","graphQlError","_graphQlError$extensi","_graphQlError$extensi2","_graphQlError$extensi3","_graphQlError$extensi4","errorCode","extensions","code","fieldName","field","formErrors","duplicate","unmappedErrors","push","transformErrors","setErrors","formProps","_formProps$values","_formProps$values2","FormModalPage","isOpen","onClose","isPrimaryButtonDisabled","isSecondaryButtonDisabled","onSecondaryButtonClick","onPrimaryButtonClick","labelPrimaryButton","labelSecondaryButton","alignItems","LoadingSpinner","ContentNotification","type","Text","ApplicationPageTitle","additionalParts","PageNotFound","entryPointUriPathToPermissionKeys"],"sourceRoot":""}