{"version":3,"file":"5912.reviews.ad18741fb077d2850370.js","mappings":"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","sources":["webpack://my-new-custom-application-project/./src/hooks/use-reviews-connector/fetch-reviews.ctp.graphql","webpack://my-new-custom-application-project/./src/hooks/use-reviews-connector/use-reviews-connector.ts","webpack://my-new-custom-application-project/./src/components/reviews/reviews.tsx","webpack://my-new-custom-application-project/./src/helpers.ts"],"sourcesContent":["\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"FetchReviews\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"channelId\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"channel\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"channelId\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"version\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"roles\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nameAllLocales\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"locale\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":177}};\n    doc.loc.source = {\"body\":\"query FetchReviews($channelId: String!) {\\r\\n  channel(id: $channelId) {\\r\\n    id\\r\\n    version\\r\\n    key\\r\\n    roles\\r\\n    nameAllLocales {\\r\\n      locale\\r\\n      value\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \r\n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \r\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n    \n    module.exports = doc;\n    \n        module.exports[\"FetchReviews\"] = oneQuery(doc, \"FetchReviews\");\n        \r\n","/// <reference path=\"../../../@types/commercetools__sync-actions/index.d.ts\" />\r\n/// <reference path=\"../../../@types-extensions/graphql-ctp/index.d.ts\" />\r\n\r\nimport type { ApolloError } from '@apollo/client';\r\nimport {\r\n  useMcQuery,\r\n  useMcMutation,\r\n} from '@commercetools-frontend/application-shell';\r\nimport { GRAPHQL_TARGETS } from '@commercetools-frontend/constants';\r\nimport { createSyncChannels } from '@commercetools/sync-actions';\r\nimport type { TDataTableSortingState } from '@commercetools-uikit/hooks';\r\nimport type {\r\n  TFetchReviewsQuery,\r\n  TFetchReviewsQueryVariables,\r\n  TFetchChannelsQuery,\r\n  TFetchChannelsQueryVariables,\r\n  TFetchChannelDetailsQuery,\r\n  TFetchChannelDetailsQueryVariables,\r\n  TUpdateChannelDetailsMutation,\r\n  TUpdateChannelDetailsMutationVariables,\r\n} from '../../types/generated/ctp';\r\nimport {\r\n  createGraphQlUpdateActions,\r\n  extractErrorFromGraphQlResponse,\r\n  convertToActionData,\r\n} from '../../helpers';\r\nimport FetchReviews from './fetch-reviews.ctp.graphql';\r\n\r\n\r\nconst syncChannels = createSyncChannels();\r\n\r\ntype PaginationAndSortingProps = {\r\n  page: { value: number };\r\n  perPage: { value: number };\r\n  tableSorting: TDataTableSortingState;\r\n};\r\ntype TUseReviewsFetcher = (\r\n  paginationAndSortingProps: PaginationAndSortingProps\r\n) => {\r\n  reviewsPaginatedResult?: TFetchReviewsQuery['reviews'];\r\n  error?: ApolloError;\r\n  loading: boolean;\r\n};\r\n\r\nexport const useReviewsFetcher: TUseReviewsFetcher = ({\r\n  page,\r\n  perPage,\r\n  tableSorting,\r\n}) => {\r\n  const { data, error, loading } = useMcQuery<\r\n    TFetchReviewsQuery,\r\n    TFetchReviewsQueryVariables\r\n  >(FetchReviews, {\r\n    variables: {\r\n      limit: perPage.value,\r\n      offset: (page.value - 1) * perPage.value,\r\n      sort: [`${tableSorting.value.key} ${tableSorting.value.order}`],\r\n    },\r\n    context: {\r\n      target: GRAPHQL_TARGETS.COMMERCETOOLS_PLATFORM,\r\n    },\r\n  });\r\n\r\n  return {\r\n    reviewsPaginatedResult: data?.reviews,\r\n    error,\r\n    loading,\r\n  };\r\n};\r\n\r\ntype TUseChannelDetailsFetcher = (channelId: string) => {\r\n  channel?: TFetchChannelDetailsQuery['channel'];\r\n  error?: ApolloError;\r\n  loading: boolean;\r\n};\r\n\r\nexport const useChannelDetailsFetcher: TUseChannelDetailsFetcher = (\r\n  channelId\r\n) => {\r\n  const { data, error, loading } = useMcQuery<\r\n    TFetchChannelDetailsQuery,\r\n    TFetchChannelDetailsQueryVariables\r\n  >(FetchChannelDetailsQuery, {\r\n    variables: {\r\n      channelId,\r\n    },\r\n    context: {\r\n      target: GRAPHQL_TARGETS.COMMERCETOOLS_PLATFORM,\r\n    },\r\n  });\r\n\r\n  return {\r\n    channel: data?.channel,\r\n    error,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport const useChannelDetailsUpdater = () => {\r\n  const [updateChannelDetails, { loading }] = useMcMutation<\r\n    TUpdateChannelDetailsMutation,\r\n    TUpdateChannelDetailsMutationVariables\r\n  >(UpdateChannelDetailsMutation);\r\n\r\n  const execute = async ({\r\n    originalDraft,\r\n    nextDraft,\r\n  }: {\r\n    originalDraft: NonNullable<TFetchChannelDetailsQuery['channel']>;\r\n    nextDraft: unknown;\r\n  }) => {\r\n    const actions = syncChannels.buildActions(\r\n      nextDraft,\r\n      convertToActionData(originalDraft)\r\n    );\r\n    try {\r\n      return await updateChannelDetails({\r\n        context: {\r\n          target: GRAPHQL_TARGETS.COMMERCETOOLS_PLATFORM,\r\n        },\r\n        variables: {\r\n          channelId: originalDraft.id,\r\n          version: originalDraft.version,\r\n          actions: createGraphQlUpdateActions(actions),\r\n        },\r\n      });\r\n    } catch (graphQlResponse) {\r\n      throw extractErrorFromGraphQlResponse(graphQlResponse);\r\n    }\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    execute,\r\n  };\r\n};\r\n","import { ContentNotification } from '@commercetools-uikit/notifications';\r\nimport { useReviewsFetcher } from '../../hooks/use-reviews-connector';\r\nimport {\r\n  usePaginationState,\r\n  useDataTableSortingState,\r\n} from '@commercetools-uikit/hooks';\r\nimport { useApplicationContext } from '@commercetools-frontend/application-shell-connectors';\r\nimport { getErrorMessage } from '../../helpers';\r\nimport Text from '@commercetools-uikit/text';\r\n\r\nconst Reviews = () => {\r\n  const { page, perPage } = usePaginationState();\r\n  const tableSorting = useDataTableSortingState({ key: 'key', order: 'asc' });\r\n  // const { dataLocale, projectLanguages } = useApplicationContext((context) => ({\r\n  //   dataLocale: context.dataLocale,\r\n  //   projectLanguages: context.project?.languages,\r\n  // }));\r\n  const { reviewsPaginatedResult, error, loading } = useReviewsFetcher({\r\n    page,\r\n    perPage,\r\n    tableSorting,\r\n  });\r\n\r\n  console.log(reviewsPaginatedResult);\r\n  if (error) {\r\n    return (\r\n      <ContentNotification type=\"error\">\r\n        <Text.Body>{getErrorMessage(error)}</Text.Body>\r\n      </ContentNotification>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      aaaaa\r\n    </div>\r\n  );\r\n};\r\nReviews.displayName = 'Reviews';\r\n\r\nexport default Reviews;\r\n","import {\r\n  transformLocalizedStringToLocalizedField,\r\n  transformLocalizedFieldToLocalizedString,\r\n} from '@commercetools-frontend/l10n';\r\nimport { ApolloError, type ServerError } from '@apollo/client';\r\nimport type { TChannel } from './types/generated/ctp';\r\nimport type {\r\n  TGraphqlUpdateAction,\r\n  TSyncAction,\r\n  TChangeNameActionPayload,\r\n} from './types';\r\n\r\nexport const getErrorMessage = (error: ApolloError) =>\r\n  error.graphQLErrors?.map((e) => e.message).join('\\n') || error.message;\r\n\r\nconst isServerError = (\r\n  error: ApolloError['networkError']\r\n): error is ServerError => {\r\n  return Boolean((error as ServerError)?.result);\r\n};\r\n\r\nexport const extractErrorFromGraphQlResponse = (graphQlResponse: unknown) => {\r\n  if (graphQlResponse instanceof ApolloError) {\r\n    if (\r\n      isServerError(graphQlResponse.networkError) &&\r\n      typeof graphQlResponse.networkError?.result !== 'string' &&\r\n      graphQlResponse.networkError?.result?.errors.length > 0\r\n    ) {\r\n      return graphQlResponse?.networkError?.result.errors;\r\n    }\r\n\r\n    if (graphQlResponse.graphQLErrors?.length > 0) {\r\n      return graphQlResponse.graphQLErrors;\r\n    }\r\n  }\r\n\r\n  return graphQlResponse;\r\n};\r\n\r\nconst getNameFromPayload = (payload: TChangeNameActionPayload) => ({\r\n  name: transformLocalizedStringToLocalizedField(payload.name),\r\n});\r\n\r\nconst isChangeNameActionPayload = (\r\n  actionPayload: Record<string, unknown>\r\n): actionPayload is TChangeNameActionPayload => {\r\n  return (actionPayload as TChangeNameActionPayload)?.name !== undefined;\r\n};\r\n\r\nconst convertAction = (action: TSyncAction): TGraphqlUpdateAction => {\r\n  const { action: actionName, ...actionPayload } = action;\r\n  return {\r\n    [actionName]:\r\n      actionName === 'changeName' && isChangeNameActionPayload(actionPayload)\r\n        ? getNameFromPayload(actionPayload)\r\n        : actionPayload,\r\n  };\r\n};\r\n\r\nexport const createGraphQlUpdateActions = (actions: TSyncAction[]) =>\r\n  actions.reduce<TGraphqlUpdateAction[]>(\r\n    (previousActions, syncAction) => [\r\n      ...previousActions,\r\n      convertAction(syncAction),\r\n    ],\r\n    []\r\n  );\r\n\r\nexport const convertToActionData = (draft: Partial<TChannel>) => ({\r\n  ...draft,\r\n  name: transformLocalizedFieldToLocalizedString(draft.nameAllLocales || []),\r\n});\r\n"],"names":["doc","loc","source","collectFragmentReferences","node","refs","kind","add","name","value","type","selectionSet","selections","forEach","selection","variableDefinitions","def","definitions","definitionRefs","findOperation","i","length","element","extractReferences","Set","module","exports","oneQuery","operationName","newDoc","hasOwnProperty","opRefs","allRefs","newRefs","refName","size","prevRefs","has","childRef","op","push","createSyncChannels","Reviews","_usePaginationState","usePaginationState","_useReviewsFetcher","_ref","_context","page","perPage","tableSorting","_useMcQuery","useMcQuery","FetchReviews","variables","limit","offset","sort","_concatInstanceProperty","concat","key","call","order","context","target","GRAPHQL_TARGETS","data","error","loading","reviewsPaginatedResult","reviews","useReviewsFetcher","useDataTableSortingState","console","log","_jsx","ContentNotification","children","Text","getErrorMessage","displayName","_error$graphQLErrors","graphQLErrors","_mapInstanceProperty","e","message","join","extractErrorFromGraphQlResponse","graphQlResponse","ApolloError","_graphQlResponse$netw","_graphQlResponse$netw2","_graphQlResponse$grap","_graphQlResponse$netw3","networkError","Boolean","result","errors","isChangeNameActionPayload","actionPayload","undefined","convertAction","action","actionName","_objectWithoutProperties","_excluded","payload","transformLocalizedStringToLocalizedField","createGraphQlUpdateActions","actions","_reduceInstanceProperty","previousActions","syncAction","convertToActionData","draft","_objectSpread","transformLocalizedFieldToLocalizedString","nameAllLocales"],"sourceRoot":""}