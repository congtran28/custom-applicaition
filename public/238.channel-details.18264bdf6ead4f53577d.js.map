{"version":3,"file":"238.channel-details.18264bdf6ead4f53577d.js","mappings":"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","sources":["webpack://my-new-custom-application-project/./src/constants.ts","webpack://my-new-custom-application-project/./src/components/channel-details/conversions.ts","webpack://my-new-custom-application-project/./src/components/channel-details/constants.ts","webpack://my-new-custom-application-project/./src/components/channel-details/validate.ts","webpack://my-new-custom-application-project/./src/components/channel-details/messages.ts","webpack://my-new-custom-application-project/./src/components/channel-details/channel-details-form.tsx","webpack://my-new-custom-application-project/./src/components/channel-details/channel-details.tsx","webpack://my-new-custom-application-project/./src/components/channel-details/transform-errors.ts"],"sourcesContent":["// Make sure to import the helper functions from the `ssr` entry point.\nimport { entryPointUriPathToPermissionKeys } from '@commercetools-frontend/application-shell/ssr';\n\nexport const entryPointUriPath = 'product-review';\n\nexport const PERMISSIONS = entryPointUriPathToPermissionKeys(entryPointUriPath);\n","import LocalizedTextInput from '@commercetools-uikit/localized-text-input';\r\nimport { transformLocalizedFieldToLocalizedString } from '@commercetools-frontend/l10n';\r\nimport type { TFetchChannelDetailsQuery } from '../../types/generated/ctp';\r\nimport type { TFormValues } from '../../types';\r\n\r\nexport const docToFormValues = (\r\n  channel: TFetchChannelDetailsQuery['channel'],\r\n  languages: string[]\r\n): TFormValues => ({\r\n  key: channel?.key ?? '',\r\n  roles: channel?.roles ?? [],\r\n  name: LocalizedTextInput.createLocalizedString(\r\n    languages,\r\n    transformLocalizedFieldToLocalizedString(channel?.nameAllLocales ?? []) ??\r\n      {}\r\n  ),\r\n});\r\n\r\nexport const formValuesToDoc = (formValues: TFormValues) => ({\r\n  name: LocalizedTextInput.omitEmptyTranslations(formValues.name),\r\n  key: formValues.key,\r\n  roles: formValues.roles,\r\n});\r\n","// https://docs.commercetools.com/api/projects/channels#channelroleenum\r\nexport const CHANNEL_ROLES = {\r\n  inventorySupply: 'InventorySupply',\r\n  productDistribution: 'ProductDistribution',\r\n  orderExport: 'OrderExport',\r\n  orderImport: 'OrderImport',\r\n  primary: 'Primary',\r\n};\r\n","import TextInput from '@commercetools-uikit/text-input';\r\nimport omitEmpty from 'omit-empty-es';\r\nimport type { FormikErrors } from 'formik';\r\nimport type { TFormValues } from '../../types';\r\n\r\ntype TErrors = {\r\n  key: { missing?: boolean };\r\n  roles: { missing?: boolean };\r\n};\r\n\r\nconst validate = (formikValues: TFormValues): FormikErrors<TFormValues> => {\r\n  const errors: TErrors = {\r\n    key: {},\r\n    roles: {},\r\n  };\r\n\r\n  if (TextInput.isEmpty(formikValues.key)) {\r\n    errors.key.missing = true;\r\n  }\r\n  if (Array.isArray(formikValues.roles) && formikValues.roles.length === 0) {\r\n    errors.roles.missing = true;\r\n  }\r\n  return omitEmpty(errors);\r\n};\r\n\r\nexport default validate;\r\n","import { defineMessages } from 'react-intl';\r\n\r\nexport default defineMessages({\r\n  backToChannelsList: {\r\n    id: 'ChannelDetails.backToChannelsList',\r\n    defaultMessage: 'Back to channels list',\r\n  },\r\n  duplicateKey: {\r\n    id: 'ChannelDetails.duplicateKey',\r\n    defaultMessage: 'A channel with this key already exists.',\r\n  },\r\n  channelUpdated: {\r\n    id: 'ChannelDetails.channelUpdated',\r\n    defaultMessage: 'Channel {channelName} updated',\r\n  },\r\n  channelKeyLabel: {\r\n    id: 'ChannelDetails.channelKeyLabel',\r\n    defaultMessage: 'Channel key',\r\n  },\r\n  channelNameLabel: {\r\n    id: 'ChannelDetails.channelNameLabel',\r\n    defaultMessage: 'Channel name',\r\n  },\r\n  channelRolesLabel: {\r\n    id: 'ChannelDetails.channelRolesLabel',\r\n    defaultMessage: 'Channel roles',\r\n  },\r\n  hint: {\r\n    id: 'ChannelDetails.hint',\r\n    defaultMessage:\r\n      'This page demonstrates for instance how to use forms, notifications and how to update data using GraphQL, etc.',\r\n  },\r\n  modalTitle: {\r\n    id: 'ChannelDetails.modalTitle',\r\n    defaultMessage: 'Edit channel',\r\n  },\r\n  channelDetailsErrorMessage: {\r\n    id: 'ChannelDetails.errorMessage',\r\n    defaultMessage:\r\n      'We were unable to fetch the channel details. Please check your connection, the provided channel ID and try again.',\r\n  },\r\n});\r\n","import type { ReactElement } from 'react';\r\nimport { useFormik, type FormikHelpers } from 'formik';\r\nimport { useIntl } from 'react-intl';\r\nimport LocalizedTextField from '@commercetools-uikit/localized-text-field';\r\nimport TextField from '@commercetools-uikit/text-field';\r\nimport Spacings from '@commercetools-uikit/spacings';\r\nimport SelectField from '@commercetools-uikit/select-field';\r\nimport type { TFormValues } from '../../types';\r\nimport { CHANNEL_ROLES } from './constants';\r\nimport validate from './validate';\r\nimport messages from './messages';\r\n\r\ntype TChannelRole = keyof typeof CHANNEL_ROLES;\r\ntype Formik = ReturnType<typeof useFormik>;\r\ntype FormProps = {\r\n  formElements: ReactElement;\r\n  values: Formik['values'];\r\n  isDirty: Formik['dirty'];\r\n  isSubmitting: Formik['isSubmitting'];\r\n  submitForm: Formik['handleSubmit'];\r\n  handleReset: Formik['handleReset'];\r\n};\r\ntype TChannelDetailsFormProps = {\r\n  onSubmit: (\r\n    values: TFormValues,\r\n    formikHelpers: FormikHelpers<TFormValues>\r\n  ) => void | Promise<unknown>;\r\n  initialValues: TFormValues;\r\n  isReadOnly: boolean;\r\n  dataLocale: string;\r\n  children: (formProps: FormProps) => JSX.Element;\r\n};\r\n\r\nconst getRoleOptions = Object.keys(CHANNEL_ROLES).map((key) => ({\r\n  label: CHANNEL_ROLES[key as TChannelRole],\r\n  value: CHANNEL_ROLES[key as TChannelRole],\r\n}));\r\n\r\nconst ChannelDetailsForm = (props: TChannelDetailsFormProps) => {\r\n  const intl = useIntl();\r\n  const formik = useFormik<TFormValues>({\r\n    initialValues: props.initialValues,\r\n    onSubmit: props.onSubmit,\r\n    validate,\r\n    enableReinitialize: true,\r\n  });\r\n\r\n  const formElements = (\r\n    <Spacings.Stack scale=\"l\">\r\n      <TextField\r\n        name=\"key\"\r\n        title={intl.formatMessage(messages.channelKeyLabel)}\r\n        value={formik.values.key}\r\n        errors={TextField.toFieldErrors<TFormValues>(formik.errors).key}\r\n        touched={formik.touched.key}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        isReadOnly={props.isReadOnly}\r\n        renderError={(errorKey) => {\r\n          if (errorKey === 'duplicate') {\r\n            return intl.formatMessage(messages.duplicateKey);\r\n          }\r\n          return null;\r\n        }}\r\n        isRequired\r\n        horizontalConstraint={13}\r\n      />\r\n      <LocalizedTextField\r\n        name=\"name\"\r\n        title={intl.formatMessage(messages.channelNameLabel)}\r\n        value={formik.values.name}\r\n        errors={TextField.toFieldErrors<TFormValues>(formik.errors).name}\r\n        touched={Boolean(formik.touched.name)}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        selectedLanguage={props.dataLocale}\r\n        isReadOnly={props.isReadOnly}\r\n        horizontalConstraint={13}\r\n      />\r\n      <SelectField\r\n        name=\"roles\"\r\n        title={intl.formatMessage(messages.channelRolesLabel)}\r\n        value={formik.values.roles}\r\n        errors={SelectField.toFieldErrors<TFormValues>(formik.errors).roles}\r\n        touched={formik.touched.roles}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        isMulti\r\n        options={getRoleOptions}\r\n        isReadOnly={props.isReadOnly}\r\n        isRequired\r\n        horizontalConstraint={13}\r\n      />\r\n    </Spacings.Stack>\r\n  );\r\n\r\n  return props.children({\r\n    formElements,\r\n    values: formik.values,\r\n    isDirty: formik.dirty,\r\n    isSubmitting: formik.isSubmitting,\r\n    submitForm: formik.handleSubmit,\r\n    handleReset: formik.handleReset,\r\n  });\r\n};\r\nChannelDetailsForm.displayName = 'ChannelDetailsForm';\r\n\r\nexport default ChannelDetailsForm;\r\n","import { useIntl } from 'react-intl';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  PageNotFound,\r\n  FormModalPage,\r\n} from '@commercetools-frontend/application-components';\r\nimport { ContentNotification } from '@commercetools-uikit/notifications';\r\nimport Text from '@commercetools-uikit/text';\r\nimport Spacings from '@commercetools-uikit/spacings';\r\nimport LoadingSpinner from '@commercetools-uikit/loading-spinner';\r\nimport { useCallback } from 'react';\r\nimport { useApplicationContext } from '@commercetools-frontend/application-shell-connectors';\r\nimport { formatLocalizedString } from '@commercetools-frontend/l10n';\r\nimport { DOMAINS, NO_VALUE_FALLBACK } from '@commercetools-frontend/constants';\r\nimport { useIsAuthorized } from '@commercetools-frontend/permissions';\r\nimport {\r\n  useShowNotification,\r\n  useShowApiErrorNotification,\r\n  type TApiErrorNotificationOptions,\r\n} from '@commercetools-frontend/actions-global';\r\nimport { PERMISSIONS } from '../../constants';\r\nimport {\r\n  useChannelDetailsUpdater,\r\n  useChannelDetailsFetcher,\r\n} from '../../hooks/use-channels-connector';\r\nimport { docToFormValues, formValuesToDoc } from './conversions';\r\nimport ChannelsDetailsForm from './channel-details-form';\r\nimport { transformErrors } from './transform-errors';\r\nimport messages from './messages';\r\nimport { ApplicationPageTitle } from '@commercetools-frontend/application-shell';\r\n\r\ntype TChannelDetailsProps = {\r\n  onClose: () => void;\r\n};\r\n\r\nconst ChannelDetails = (props: TChannelDetailsProps) => {\r\n  const intl = useIntl();\r\n  const params = useParams<{ id: string }>();\r\n  const { loading, error, channel } = useChannelDetailsFetcher(params.id);\r\n  const { dataLocale, projectLanguages } = useApplicationContext((context) => ({\r\n    dataLocale: context.dataLocale ?? '',\r\n    projectLanguages: context.project?.languages ?? [],\r\n  }));\r\n  const canManage = useIsAuthorized({\r\n    demandedPermissions: [PERMISSIONS.Manage],\r\n  });\r\n  const showNotification = useShowNotification();\r\n  const showApiErrorNotification = useShowApiErrorNotification();\r\n  const channelDetailsUpdater = useChannelDetailsUpdater();\r\n  const handleSubmit = useCallback(\r\n    async (formikValues, formikHelpers) => {\r\n      const data = formValuesToDoc(formikValues);\r\n      try {\r\n        await channelDetailsUpdater.execute({\r\n          originalDraft: channel!,\r\n          nextDraft: data,\r\n        });\r\n        showNotification({\r\n          kind: 'success',\r\n          domain: DOMAINS.SIDE,\r\n          text: intl.formatMessage(messages.channelUpdated, {\r\n            channelName: formatLocalizedString(formikValues, {\r\n              key: 'name',\r\n              locale: dataLocale,\r\n              fallbackOrder: projectLanguages,\r\n            }),\r\n          }),\r\n        });\r\n      } catch (graphQLErrors) {\r\n        const transformedErrors = transformErrors(graphQLErrors);\r\n        if (transformedErrors.unmappedErrors.length > 0) {\r\n          showApiErrorNotification({\r\n            errors:\r\n              transformedErrors.unmappedErrors as TApiErrorNotificationOptions['errors'],\r\n          });\r\n        }\r\n\r\n        formikHelpers.setErrors(transformedErrors.formErrors);\r\n      }\r\n    },\r\n    [\r\n      channel,\r\n      channelDetailsUpdater,\r\n      dataLocale,\r\n      intl,\r\n      projectLanguages,\r\n      showApiErrorNotification,\r\n      showNotification,\r\n    ]\r\n  );\r\n  return (\r\n    <ChannelsDetailsForm\r\n      initialValues={docToFormValues(channel, projectLanguages)}\r\n      onSubmit={handleSubmit}\r\n      isReadOnly={!canManage}\r\n      dataLocale={dataLocale}\r\n    >\r\n      {(formProps) => {\r\n        const channelName = formatLocalizedString(\r\n          {\r\n            name: formProps.values?.name,\r\n          },\r\n          {\r\n            key: 'name',\r\n            locale: dataLocale,\r\n            fallbackOrder: projectLanguages,\r\n            fallback: NO_VALUE_FALLBACK,\r\n          }\r\n        );\r\n        return (\r\n          <FormModalPage\r\n            title={channelName}\r\n            isOpen\r\n            onClose={props.onClose}\r\n            isPrimaryButtonDisabled={\r\n              formProps.isSubmitting || !formProps.isDirty || !canManage\r\n            }\r\n            isSecondaryButtonDisabled={!formProps.isDirty}\r\n            onSecondaryButtonClick={formProps.handleReset}\r\n            onPrimaryButtonClick={() => formProps.submitForm()}\r\n            labelPrimaryButton={FormModalPage.Intl.save}\r\n            labelSecondaryButton={FormModalPage.Intl.revert}\r\n          >\r\n            {loading && (\r\n              <Spacings.Stack alignItems=\"center\">\r\n                <LoadingSpinner />\r\n              </Spacings.Stack>\r\n            )}\r\n            {error && (\r\n              <ContentNotification type=\"error\">\r\n                <Text.Body>\r\n                  {intl.formatMessage(messages.channelDetailsErrorMessage)}\r\n                </Text.Body>\r\n              </ContentNotification>\r\n            )}\r\n            {channel && formProps.formElements}\r\n            {channel && (\r\n              <ApplicationPageTitle additionalParts={[channelName]} />\r\n            )}\r\n            {channel === null && <PageNotFound />}\r\n          </FormModalPage>\r\n        );\r\n      }}\r\n    </ChannelsDetailsForm>\r\n  );\r\n};\r\nChannelDetails.displayName = 'ChannelDetails';\r\n\r\nexport default ChannelDetails;\r\n","import omitEmpty from 'omit-empty-es';\r\n\r\nconst DUPLICATE_FIELD_ERROR_CODE = 'DuplicateField';\r\n\r\ntype TransformedErrors = {\r\n  unmappedErrors: unknown[];\r\n  formErrors: Record<string, { duplicate: boolean }>;\r\n};\r\n\r\nexport const transformErrors = (graphQlErrors: unknown): TransformedErrors => {\r\n  const errorsToMap = Array.isArray(graphQlErrors)\r\n    ? graphQlErrors\r\n    : [graphQlErrors];\r\n\r\n  const { formErrors, unmappedErrors } = errorsToMap.reduce<TransformedErrors>(\r\n    (transformedErrors, graphQlError) => {\r\n      const errorCode = graphQlError?.extensions?.code ?? graphQlError.code;\r\n      const fieldName = graphQlError?.extensions?.field ?? graphQlError.field;\r\n\r\n      if (errorCode === DUPLICATE_FIELD_ERROR_CODE) {\r\n        transformedErrors.formErrors[fieldName] = { duplicate: true };\r\n      } else {\r\n        transformedErrors.unmappedErrors.push(graphQlError);\r\n      }\r\n      return transformedErrors;\r\n    },\r\n    {\r\n      formErrors: {}, // will be mappped to form field error messages\r\n      unmappedErrors: [], // will result in dispatching `showApiErrorNotification`\r\n    }\r\n  );\r\n\r\n  return {\r\n    formErrors: omitEmpty(formErrors),\r\n    unmappedErrors,\r\n  };\r\n};\r\n"],"names":["PERMISSIONS","entryPointUriPathToPermissionKeys","docToFormValues","channel","languages","_channel$key","_channel$roles","_transformLocalizedFi","_channel$nameAllLocal","key","roles","name","LocalizedTextInput","transformLocalizedFieldToLocalizedString","nameAllLocales","CHANNEL_ROLES","inventorySupply","productDistribution","orderExport","orderImport","primary","formikValues","errors","TextInput","missing","_Array$isArray","length","omitEmpty","defineMessages","backToChannelsList","id","defaultMessage","duplicateKey","channelUpdated","channelKeyLabel","channelNameLabel","channelRolesLabel","hint","modalTitle","channelDetailsErrorMessage","getRoleOptions","_mapInstanceProperty","_context","_Object$keys","call","label","value","ChannelDetailsForm","props","intl","useIntl","formik","useFormik","initialValues","onSubmit","validate","enableReinitialize","formElements","_jsxs","Spacings","scale","children","_jsx","TextField","title","formatMessage","messages","_valuesInstanceProperty","touched","onChange","handleChange","onBlur","handleBlur","isReadOnly","renderError","errorKey","isRequired","horizontalConstraint","LocalizedTextField","Boolean","selectedLanguage","dataLocale","SelectField","isMulti","options","values","isDirty","dirty","isSubmitting","submitForm","handleSubmit","handleReset","displayName","ChannelDetails","params","useParams","_useChannelDetailsFet","useChannelDetailsFetcher","loading","error","_useApplicationContex","useApplicationContext","context","_context$dataLocale","_context$project$lang","_context$project","projectLanguages","project","canManage","useIsAuthorized","demandedPermissions","Manage","showNotification","useShowNotification","showApiErrorNotification","useShowApiErrorNotification","channelDetailsUpdater","useChannelDetailsUpdater","useCallback","async","formikHelpers","data","formValues","execute","originalDraft","nextDraft","kind","domain","DOMAINS","text","channelName","formatLocalizedString","locale","fallbackOrder","graphQLErrors","transformedErrors","graphQlErrors","errorsToMap","_errorsToMap$reduce","_reduceInstanceProperty","graphQlError","_graphQlError$extensi","_graphQlError$extensi2","_graphQlError$extensi3","_graphQlError$extensi4","errorCode","extensions","code","fieldName","field","formErrors","duplicate","unmappedErrors","push","transformErrors","setErrors","ChannelsDetailsForm","formProps","_formProps$values","fallback","NO_VALUE_FALLBACK","FormModalPage","isOpen","onClose","isPrimaryButtonDisabled","isSecondaryButtonDisabled","onSecondaryButtonClick","onPrimaryButtonClick","labelPrimaryButton","labelSecondaryButton","alignItems","LoadingSpinner","ContentNotification","type","Text","ApplicationPageTitle","additionalParts","PageNotFound"],"sourceRoot":""}